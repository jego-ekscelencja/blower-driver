
Dmuchawa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f24  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030b8  080030b8  000040b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c8  080030c8  00005018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080030c8  080030c8  000040c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030d0  080030d0  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d0  080030d0  000040d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030d4  080030d4  000040d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080030d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000018  080030f0  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080030f0  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009aec  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd1  00000000  00000000  0000eb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00010808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087f  00000000  00000000  00011320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157b7  00000000  00000000  00011b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c82f  00000000  00000000  00027356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087c77  00000000  00000000  00033b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb7fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d74  00000000  00000000  000bb840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000be5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080030a0 	.word	0x080030a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	080030a0 	.word	0x080030a0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b36      	ldr	r3, [pc, #216]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a35      	ldr	r2, [pc, #212]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b33      	ldr	r3, [pc, #204]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a2e      	ldr	r2, [pc, #184]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b2c      	ldr	r3, [pc, #176]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a27      	ldr	r2, [pc, #156]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b25      	ldr	r3, [pc, #148]	@ (80005f4 <MX_GPIO_Init+0xf4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000570:	4821      	ldr	r0, [pc, #132]	@ (80005f8 <MX_GPIO_Init+0xf8>)
 8000572:	f001 fc45 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Save_Led_GPIO_Port, Save_Led_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2102      	movs	r1, #2
 800057a:	4820      	ldr	r0, [pc, #128]	@ (80005fc <MX_GPIO_Init+0xfc>)
 800057c:	f001 fc40 	bl	8001e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000580:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058a:	2301      	movs	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	4619      	mov	r1, r3
 8000598:	4817      	ldr	r0, [pc, #92]	@ (80005f8 <MX_GPIO_Init+0xf8>)
 800059a:	f001 fa95 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Save_Led_Pin */
  GPIO_InitStruct.Pin = Save_Led_Pin;
 800059e:	2302      	movs	r3, #2
 80005a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Save_Led_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	4811      	ldr	r0, [pc, #68]	@ (80005fc <MX_GPIO_Init+0xfc>)
 80005b6:	f001 fa87 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Save_Bt_Pin Selektor_1_Pin Selektor_2_Pin Selektor_3_Pin
                           Selektor_4_Pin F_Set_1_Pin */
  GPIO_InitStruct.Pin = Save_Bt_Pin|Selektor_1_Pin|Selektor_2_Pin|Selektor_3_Pin
 80005ba:	23fc      	movs	r3, #252	@ 0xfc
 80005bc:	60fb      	str	r3, [r7, #12]
                          |Selektor_4_Pin|F_Set_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <MX_GPIO_Init+0xfc>)
 80005ce:	f001 fa7b 	bl	8001ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_Set_2_Pin F_Set_3_Pin SP_Up_Pin SP_Dn_Pin */
  GPIO_InitStruct.Pin = F_Set_2_Pin|F_Set_3_Pin|SP_Up_Pin|SP_Dn_Pin;
 80005d2:	f240 4307 	movw	r3, #1031	@ 0x407
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	@ (8000600 <MX_GPIO_Init+0x100>)
 80005e8:	f001 fa6e 	bl	8001ac8 <HAL_GPIO_Init>

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020800 	.word	0x40020800
 80005fc:	40020000 	.word	0x40020000
 8000600:	40020400 	.word	0x40020400

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	@ 0x58
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fe21 	bl	8001250 <HAL_Init>

  /* USER CODE BEGIN Init */
  OffsetsFlash_t* loaded = LoadOffsetsFromFlash();
 800060e:	f000 fc0f 	bl	8000e30 <LoadOffsetsFromFlash>
 8000612:	6438      	str	r0, [r7, #64]	@ 0x40

  if (loaded != NULL)
 8000614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000616:	2b00      	cmp	r3, #0
 8000618:	d019      	beq.n	800064e <main+0x4a>
  {
      saved_offsets = *loaded;
 800061a:	4bab      	ldr	r3, [pc, #684]	@ (80008c8 <main+0x2c4>)
 800061c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800061e:	6810      	ldr	r0, [r2, #0]
 8000620:	6851      	ldr	r1, [r2, #4]
 8000622:	c303      	stmia	r3!, {r0, r1}

      Offset_for1 = saved_offsets.Offset_for1;
 8000624:	4ba8      	ldr	r3, [pc, #672]	@ (80008c8 <main+0x2c4>)
 8000626:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800062a:	4ba8      	ldr	r3, [pc, #672]	@ (80008cc <main+0x2c8>)
 800062c:	701a      	strb	r2, [r3, #0]
      Offset_for2 = saved_offsets.Offset_for2;
 800062e:	4ba6      	ldr	r3, [pc, #664]	@ (80008c8 <main+0x2c4>)
 8000630:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000634:	4ba6      	ldr	r3, [pc, #664]	@ (80008d0 <main+0x2cc>)
 8000636:	701a      	strb	r2, [r3, #0]
      Offset_for3 = saved_offsets.Offset_for3;
 8000638:	4ba3      	ldr	r3, [pc, #652]	@ (80008c8 <main+0x2c4>)
 800063a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800063e:	4ba5      	ldr	r3, [pc, #660]	@ (80008d4 <main+0x2d0>)
 8000640:	701a      	strb	r2, [r3, #0]
      Offset_for4 = saved_offsets.Offset_for4;
 8000642:	4ba1      	ldr	r3, [pc, #644]	@ (80008c8 <main+0x2c4>)
 8000644:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8000648:	4ba3      	ldr	r3, [pc, #652]	@ (80008d8 <main+0x2d4>)
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	e017      	b.n	800067e <main+0x7a>
  }
  else
  {
      Offset_for1 = 0;
 800064e:	4b9f      	ldr	r3, [pc, #636]	@ (80008cc <main+0x2c8>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
      Offset_for2 = 0;
 8000654:	4b9e      	ldr	r3, [pc, #632]	@ (80008d0 <main+0x2cc>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
      Offset_for3 = 0;
 800065a:	4b9e      	ldr	r3, [pc, #632]	@ (80008d4 <main+0x2d0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
      Offset_for4 = 0;
 8000660:	4b9d      	ldr	r3, [pc, #628]	@ (80008d8 <main+0x2d4>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]

      saved_offsets.Offset_for1 = 0;
 8000666:	4b98      	ldr	r3, [pc, #608]	@ (80008c8 <main+0x2c4>)
 8000668:	2200      	movs	r2, #0
 800066a:	709a      	strb	r2, [r3, #2]
      saved_offsets.Offset_for2 = 0;
 800066c:	4b96      	ldr	r3, [pc, #600]	@ (80008c8 <main+0x2c4>)
 800066e:	2200      	movs	r2, #0
 8000670:	70da      	strb	r2, [r3, #3]
      saved_offsets.Offset_for3 = 0;
 8000672:	4b95      	ldr	r3, [pc, #596]	@ (80008c8 <main+0x2c4>)
 8000674:	2200      	movs	r2, #0
 8000676:	711a      	strb	r2, [r3, #4]
      saved_offsets.Offset_for4 = 0;
 8000678:	4b93      	ldr	r3, [pc, #588]	@ (80008c8 <main+0x2c4>)
 800067a:	2200      	movs	r2, #0
 800067c:	715a      	strb	r2, [r3, #5]
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 fb0f 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f7ff ff3d 	bl	8000500 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000686:	f000 fd09 	bl	800109c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	uint32_t pwm_period = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	657b      	str	r3, [r7, #84]	@ 0x54

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET) {
 800068e:	2180      	movs	r1, #128	@ 0x80
 8000690:	4892      	ldr	r0, [pc, #584]	@ (80008dc <main+0x2d8>)
 8000692:	f001 fb9d 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d103      	bne.n	80006a4 <main+0xa0>
		// F_Set_1 założona → 500 Hz
		pwm_period = 2000 - 1; // ARR = 1999 → 1 MHz / 2000 = 500 Hz
 800069c:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 80006a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80006a2:	e018      	b.n	80006d6 <main+0xd2>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80006a4:	2101      	movs	r1, #1
 80006a6:	488e      	ldr	r0, [pc, #568]	@ (80008e0 <main+0x2dc>)
 80006a8:	f001 fb92 	bl	8001dd0 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d103      	bne.n	80006ba <main+0xb6>
		// F_Set_2 założona → 1 kHz
		pwm_period = 1000 - 1; // ARR = 999 → 1 MHz / 1000 = 1 kHz
 80006b2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80006b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80006b8:	e00d      	b.n	80006d6 <main+0xd2>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 80006ba:	2102      	movs	r1, #2
 80006bc:	4888      	ldr	r0, [pc, #544]	@ (80008e0 <main+0x2dc>)
 80006be:	f001 fb87 	bl	8001dd0 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <main+0xcc>
		// F_Set_3 założona → 2 kHz
		pwm_period = 500 - 1; // ARR = 499 → 1 MHz / 500 = 2 kHz
 80006c8:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80006cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80006ce:	e002      	b.n	80006d6 <main+0xd2>
	} else {
		// Tryb testowy → wszystko OFF
		pwm_period = 10000 - 1; // ARR = 9999 → 1 MHz / 10000 = 100 Hz
 80006d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
	}

	// ustawić auto-reload timera
	__HAL_TIM_SET_AUTORELOAD(&htim2, pwm_period);
 80006d6:	4b83      	ldr	r3, [pc, #524]	@ (80008e4 <main+0x2e0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006de:	4a81      	ldr	r2, [pc, #516]	@ (80008e4 <main+0x2e0>)
 80006e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006e2:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80006e4:	4b7f      	ldr	r3, [pc, #508]	@ (80008e4 <main+0x2e0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	635a      	str	r2, [r3, #52]	@ 0x34

	if (current_bieg == 255)
 80006ec:	4b7e      	ldr	r3, [pc, #504]	@ (80008e8 <main+0x2e4>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2bff      	cmp	r3, #255	@ 0xff
 80006f2:	d11a      	bne.n	800072a <main+0x126>
	{
	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	@ 0x28
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	633b      	str	r3, [r7, #48]	@ 0x30
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000710:	2302      	movs	r3, #2
 8000712:	637b      	str	r3, [r7, #52]	@ 0x34
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000718:	4619      	mov	r1, r3
 800071a:	4870      	ldr	r0, [pc, #448]	@ (80008dc <main+0x2d8>)
 800071c:	f001 f9d4 	bl	8001ac8 <HAL_GPIO_Init>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	486d      	ldr	r0, [pc, #436]	@ (80008dc <main+0x2d8>)
 8000726:	f001 fb6b 	bl	8001e00 <HAL_GPIO_WritePin>




		// Odczyt selektora
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 800072a:	2108      	movs	r1, #8
 800072c:	486b      	ldr	r0, [pc, #428]	@ (80008dc <main+0x2d8>)
 800072e:	f001 fb4f 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d103      	bne.n	8000740 <main+0x13c>
			current_bieg = 1;
 8000738:	4b6b      	ldr	r3, [pc, #428]	@ (80008e8 <main+0x2e4>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	e023      	b.n	8000788 <main+0x184>
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET)
 8000740:	2110      	movs	r1, #16
 8000742:	4866      	ldr	r0, [pc, #408]	@ (80008dc <main+0x2d8>)
 8000744:	f001 fb44 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d103      	bne.n	8000756 <main+0x152>
			current_bieg = 2;
 800074e:	4b66      	ldr	r3, [pc, #408]	@ (80008e8 <main+0x2e4>)
 8000750:	2202      	movs	r2, #2
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	e018      	b.n	8000788 <main+0x184>
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 8000756:	2120      	movs	r1, #32
 8000758:	4860      	ldr	r0, [pc, #384]	@ (80008dc <main+0x2d8>)
 800075a:	f001 fb39 	bl	8001dd0 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d103      	bne.n	800076c <main+0x168>
			current_bieg = 3;
 8000764:	4b60      	ldr	r3, [pc, #384]	@ (80008e8 <main+0x2e4>)
 8000766:	2203      	movs	r2, #3
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e00d      	b.n	8000788 <main+0x184>
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)
 800076c:	2140      	movs	r1, #64	@ 0x40
 800076e:	485b      	ldr	r0, [pc, #364]	@ (80008dc <main+0x2d8>)
 8000770:	f001 fb2e 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d103      	bne.n	8000782 <main+0x17e>
			current_bieg = 4;
 800077a:	4b5b      	ldr	r3, [pc, #364]	@ (80008e8 <main+0x2e4>)
 800077c:	2204      	movs	r2, #4
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e002      	b.n	8000788 <main+0x184>
		else
			current_bieg = 255;
 8000782:	4b59      	ldr	r3, [pc, #356]	@ (80008e8 <main+0x2e4>)
 8000784:	22ff      	movs	r2, #255	@ 0xff
 8000786:	701a      	strb	r2, [r3, #0]

		// ustawienie częstotliwości migania LED w zależności od biegu
		switch (current_bieg) {
 8000788:	4b57      	ldr	r3, [pc, #348]	@ (80008e8 <main+0x2e4>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3b01      	subs	r3, #1
 800078e:	2b03      	cmp	r3, #3
 8000790:	d81c      	bhi.n	80007cc <main+0x1c8>
 8000792:	a201      	add	r2, pc, #4	@ (adr r2, 8000798 <main+0x194>)
 8000794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000798:	080007a9 	.word	0x080007a9
 800079c:	080007b3 	.word	0x080007b3
 80007a0:	080007bd 	.word	0x080007bd
 80007a4:	080007c5 	.word	0x080007c5
		case 1:
			led_interval_ms = 1000; // 1 Hz
 80007a8:	4b50      	ldr	r3, [pc, #320]	@ (80008ec <main+0x2e8>)
 80007aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007ae:	601a      	str	r2, [r3, #0]
			break;
 80007b0:	e011      	b.n	80007d6 <main+0x1d2>
		case 2:
			led_interval_ms = 333;  // ~3 Hz
 80007b2:	4b4e      	ldr	r3, [pc, #312]	@ (80008ec <main+0x2e8>)
 80007b4:	f240 124d 	movw	r2, #333	@ 0x14d
 80007b8:	601a      	str	r2, [r3, #0]
			break;
 80007ba:	e00c      	b.n	80007d6 <main+0x1d2>
		case 3:
			led_interval_ms = 200;  // 5 Hz
 80007bc:	4b4b      	ldr	r3, [pc, #300]	@ (80008ec <main+0x2e8>)
 80007be:	22c8      	movs	r2, #200	@ 0xc8
 80007c0:	601a      	str	r2, [r3, #0]
			break;
 80007c2:	e008      	b.n	80007d6 <main+0x1d2>
		case 4:
			led_interval_ms = 100;  // 10 Hz
 80007c4:	4b49      	ldr	r3, [pc, #292]	@ (80008ec <main+0x2e8>)
 80007c6:	2264      	movs	r2, #100	@ 0x64
 80007c8:	601a      	str	r2, [r3, #0]
			break;
 80007ca:	e004      	b.n	80007d6 <main+0x1d2>
		default:
			led_interval_ms = 2000; // brak biegu → 0.5 Hz
 80007cc:	4b47      	ldr	r3, [pc, #284]	@ (80008ec <main+0x2e8>)
 80007ce:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80007d2:	601a      	str	r2, [r3, #0]
			break;
 80007d4:	bf00      	nop
		}

		// Odczyt przycisków SP_Up i SP_Dn
		uint8_t sp_up_pressed = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)
 80007d6:	2104      	movs	r1, #4
 80007d8:	4841      	ldr	r0, [pc, #260]	@ (80008e0 <main+0x2dc>)
 80007da:	f001 faf9 	bl	8001dd0 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
				== GPIO_PIN_RESET);
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf0c      	ite	eq
 80007e4:	2301      	moveq	r3, #1
 80007e6:	2300      	movne	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
		uint8_t sp_up_pressed = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)
 80007ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		uint8_t sp_dn_pressed = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	483b      	ldr	r0, [pc, #236]	@ (80008e0 <main+0x2dc>)
 80007f4:	f001 faec 	bl	8001dd0 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
				== GPIO_PIN_RESET);
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
		uint8_t sp_dn_pressed = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)
 8000804:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

		if ((HAL_GetTick() - last_button_time) > debounce_time_ms)
 8000808:	f000 fd88 	bl	800131c <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	4b38      	ldr	r3, [pc, #224]	@ (80008f0 <main+0x2ec>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1ad2      	subs	r2, r2, r3
 8000814:	4b37      	ldr	r3, [pc, #220]	@ (80008f4 <main+0x2f0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	f240 80d7 	bls.w	80009cc <main+0x3c8>
		{
		    if (sp_up_pressed)
 800081e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000822:	2b00      	cmp	r3, #0
 8000824:	d071      	beq.n	800090a <main+0x306>
		    {
		        switch (current_bieg)
 8000826:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <main+0x2e4>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	2b03      	cmp	r3, #3
 800082e:	d866      	bhi.n	80008fe <main+0x2fa>
 8000830:	a201      	add	r2, pc, #4	@ (adr r2, 8000838 <main+0x234>)
 8000832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000836:	bf00      	nop
 8000838:	08000849 	.word	0x08000849
 800083c:	08000867 	.word	0x08000867
 8000840:	08000885 	.word	0x08000885
 8000844:	080008a3 	.word	0x080008a3
		        {
		            case 1: if (Offset_for1 < 20) Offset_for1 += 1; break;
 8000848:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <main+0x2c8>)
 800084a:	f993 3000 	ldrsb.w	r3, [r3]
 800084e:	2b13      	cmp	r3, #19
 8000850:	dc36      	bgt.n	80008c0 <main+0x2bc>
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <main+0x2c8>)
 8000854:	f993 3000 	ldrsb.w	r3, [r3]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3301      	adds	r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	b25a      	sxtb	r2, r3
 8000860:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <main+0x2c8>)
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e02c      	b.n	80008c0 <main+0x2bc>
		            case 2: if (Offset_for2 < 20) Offset_for2 += 1; break;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <main+0x2cc>)
 8000868:	f993 3000 	ldrsb.w	r3, [r3]
 800086c:	2b13      	cmp	r3, #19
 800086e:	dc29      	bgt.n	80008c4 <main+0x2c0>
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <main+0x2cc>)
 8000872:	f993 3000 	ldrsb.w	r3, [r3]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	3301      	adds	r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	b25a      	sxtb	r2, r3
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <main+0x2cc>)
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e01f      	b.n	80008c4 <main+0x2c0>
		            case 3: if (Offset_for3 < 20) Offset_for3 += 1; break;
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <main+0x2d0>)
 8000886:	f993 3000 	ldrsb.w	r3, [r3]
 800088a:	2b13      	cmp	r3, #19
 800088c:	dc34      	bgt.n	80008f8 <main+0x2f4>
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <main+0x2d0>)
 8000890:	f993 3000 	ldrsb.w	r3, [r3]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	3301      	adds	r3, #1
 8000898:	b2db      	uxtb	r3, r3
 800089a:	b25a      	sxtb	r2, r3
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <main+0x2d0>)
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	e02a      	b.n	80008f8 <main+0x2f4>
		            case 4: if (Offset_for4 < 20) Offset_for4 += 1; break;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <main+0x2d4>)
 80008a4:	f993 3000 	ldrsb.w	r3, [r3]
 80008a8:	2b13      	cmp	r3, #19
 80008aa:	dc27      	bgt.n	80008fc <main+0x2f8>
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <main+0x2d4>)
 80008ae:	f993 3000 	ldrsb.w	r3, [r3]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	3301      	adds	r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	b25a      	sxtb	r2, r3
 80008ba:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <main+0x2d4>)
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e01d      	b.n	80008fc <main+0x2f8>
		            case 1: if (Offset_for1 < 20) Offset_for1 += 1; break;
 80008c0:	bf00      	nop
 80008c2:	e01c      	b.n	80008fe <main+0x2fa>
		            case 2: if (Offset_for2 < 20) Offset_for2 += 1; break;
 80008c4:	bf00      	nop
 80008c6:	e01a      	b.n	80008fe <main+0x2fa>
 80008c8:	20000040 	.word	0x20000040
 80008cc:	20000034 	.word	0x20000034
 80008d0:	20000035 	.word	0x20000035
 80008d4:	20000036 	.word	0x20000036
 80008d8:	20000037 	.word	0x20000037
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400
 80008e4:	20000050 	.word	0x20000050
 80008e8:	20000001 	.word	0x20000001
 80008ec:	20000004 	.word	0x20000004
 80008f0:	2000003c 	.word	0x2000003c
 80008f4:	20000008 	.word	0x20000008
		            case 3: if (Offset_for3 < 20) Offset_for3 += 1; break;
 80008f8:	bf00      	nop
 80008fa:	e000      	b.n	80008fe <main+0x2fa>
		            case 4: if (Offset_for4 < 20) Offset_for4 += 1; break;
 80008fc:	bf00      	nop
		        }
		        last_button_time = HAL_GetTick();
 80008fe:	f000 fd0d 	bl	800131c <HAL_GetTick>
 8000902:	4603      	mov	r3, r0
 8000904:	4a8d      	ldr	r2, [pc, #564]	@ (8000b3c <main+0x538>)
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	e060      	b.n	80009cc <main+0x3c8>
		    }
		    else if (sp_dn_pressed)
 800090a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800090e:	2b00      	cmp	r3, #0
 8000910:	d05c      	beq.n	80009cc <main+0x3c8>
		    {
		        switch (current_bieg)
 8000912:	4b8b      	ldr	r3, [pc, #556]	@ (8000b40 <main+0x53c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	3b01      	subs	r3, #1
 8000918:	2b03      	cmp	r3, #3
 800091a:	d852      	bhi.n	80009c2 <main+0x3be>
 800091c:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <main+0x320>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	08000955 	.word	0x08000955
 800092c:	08000975 	.word	0x08000975
 8000930:	08000995 	.word	0x08000995
		        {
		        	case 1: if (Offset_for1 > -20) Offset_for1 -= 1; break;
 8000934:	4b83      	ldr	r3, [pc, #524]	@ (8000b44 <main+0x540>)
 8000936:	f993 3000 	ldrsb.w	r3, [r3]
 800093a:	f113 0f13 	cmn.w	r3, #19
 800093e:	db39      	blt.n	80009b4 <main+0x3b0>
 8000940:	4b80      	ldr	r3, [pc, #512]	@ (8000b44 <main+0x540>)
 8000942:	f993 3000 	ldrsb.w	r3, [r3]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	3b01      	subs	r3, #1
 800094a:	b2db      	uxtb	r3, r3
 800094c:	b25a      	sxtb	r2, r3
 800094e:	4b7d      	ldr	r3, [pc, #500]	@ (8000b44 <main+0x540>)
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e02f      	b.n	80009b4 <main+0x3b0>
		            case 2: if (Offset_for2 > -20) Offset_for2 -= 1; break;
 8000954:	4b7c      	ldr	r3, [pc, #496]	@ (8000b48 <main+0x544>)
 8000956:	f993 3000 	ldrsb.w	r3, [r3]
 800095a:	f113 0f13 	cmn.w	r3, #19
 800095e:	db2b      	blt.n	80009b8 <main+0x3b4>
 8000960:	4b79      	ldr	r3, [pc, #484]	@ (8000b48 <main+0x544>)
 8000962:	f993 3000 	ldrsb.w	r3, [r3]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	3b01      	subs	r3, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	b25a      	sxtb	r2, r3
 800096e:	4b76      	ldr	r3, [pc, #472]	@ (8000b48 <main+0x544>)
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e021      	b.n	80009b8 <main+0x3b4>
		            case 3: if (Offset_for3 > -20) Offset_for3 -= 1; break;
 8000974:	4b75      	ldr	r3, [pc, #468]	@ (8000b4c <main+0x548>)
 8000976:	f993 3000 	ldrsb.w	r3, [r3]
 800097a:	f113 0f13 	cmn.w	r3, #19
 800097e:	db1d      	blt.n	80009bc <main+0x3b8>
 8000980:	4b72      	ldr	r3, [pc, #456]	@ (8000b4c <main+0x548>)
 8000982:	f993 3000 	ldrsb.w	r3, [r3]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	3b01      	subs	r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	b25a      	sxtb	r2, r3
 800098e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b4c <main+0x548>)
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e013      	b.n	80009bc <main+0x3b8>
		            case 4: if (Offset_for4 > -20) Offset_for4 -= 1; break;
 8000994:	4b6e      	ldr	r3, [pc, #440]	@ (8000b50 <main+0x54c>)
 8000996:	f993 3000 	ldrsb.w	r3, [r3]
 800099a:	f113 0f13 	cmn.w	r3, #19
 800099e:	db0f      	blt.n	80009c0 <main+0x3bc>
 80009a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000b50 <main+0x54c>)
 80009a2:	f993 3000 	ldrsb.w	r3, [r3]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	3b01      	subs	r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	4b68      	ldr	r3, [pc, #416]	@ (8000b50 <main+0x54c>)
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	e005      	b.n	80009c0 <main+0x3bc>
		        	case 1: if (Offset_for1 > -20) Offset_for1 -= 1; break;
 80009b4:	bf00      	nop
 80009b6:	e004      	b.n	80009c2 <main+0x3be>
		            case 2: if (Offset_for2 > -20) Offset_for2 -= 1; break;
 80009b8:	bf00      	nop
 80009ba:	e002      	b.n	80009c2 <main+0x3be>
		            case 3: if (Offset_for3 > -20) Offset_for3 -= 1; break;
 80009bc:	bf00      	nop
 80009be:	e000      	b.n	80009c2 <main+0x3be>
		            case 4: if (Offset_for4 > -20) Offset_for4 -= 1; break;
 80009c0:	bf00      	nop
		        }
		        last_button_time = HAL_GetTick();
 80009c2:	f000 fcab 	bl	800131c <HAL_GetTick>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a5c      	ldr	r2, [pc, #368]	@ (8000b3c <main+0x538>)
 80009ca:	6013      	str	r3, [r2, #0]
		    }
		}

		// Ograniczenie offsetów do przedziału -20% ... +20%
		if (Offset_for1 > 20)
 80009cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000b44 <main+0x540>)
 80009ce:	f993 3000 	ldrsb.w	r3, [r3]
 80009d2:	2b14      	cmp	r3, #20
 80009d4:	dd02      	ble.n	80009dc <main+0x3d8>
			Offset_for1 = 20;
 80009d6:	4b5b      	ldr	r3, [pc, #364]	@ (8000b44 <main+0x540>)
 80009d8:	2214      	movs	r2, #20
 80009da:	701a      	strb	r2, [r3, #0]
		if (Offset_for1 < -20)
 80009dc:	4b59      	ldr	r3, [pc, #356]	@ (8000b44 <main+0x540>)
 80009de:	f993 3000 	ldrsb.w	r3, [r3]
 80009e2:	f113 0f14 	cmn.w	r3, #20
 80009e6:	da02      	bge.n	80009ee <main+0x3ea>
			Offset_for1 = -20;
 80009e8:	4b56      	ldr	r3, [pc, #344]	@ (8000b44 <main+0x540>)
 80009ea:	22ec      	movs	r2, #236	@ 0xec
 80009ec:	701a      	strb	r2, [r3, #0]

		if (Offset_for2 > 20)
 80009ee:	4b56      	ldr	r3, [pc, #344]	@ (8000b48 <main+0x544>)
 80009f0:	f993 3000 	ldrsb.w	r3, [r3]
 80009f4:	2b14      	cmp	r3, #20
 80009f6:	dd02      	ble.n	80009fe <main+0x3fa>
			Offset_for2 = 20;
 80009f8:	4b53      	ldr	r3, [pc, #332]	@ (8000b48 <main+0x544>)
 80009fa:	2214      	movs	r2, #20
 80009fc:	701a      	strb	r2, [r3, #0]
		if (Offset_for2 < -20)
 80009fe:	4b52      	ldr	r3, [pc, #328]	@ (8000b48 <main+0x544>)
 8000a00:	f993 3000 	ldrsb.w	r3, [r3]
 8000a04:	f113 0f14 	cmn.w	r3, #20
 8000a08:	da02      	bge.n	8000a10 <main+0x40c>
			Offset_for2 = -20;
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b48 <main+0x544>)
 8000a0c:	22ec      	movs	r2, #236	@ 0xec
 8000a0e:	701a      	strb	r2, [r3, #0]

		if (Offset_for3 > 20)
 8000a10:	4b4e      	ldr	r3, [pc, #312]	@ (8000b4c <main+0x548>)
 8000a12:	f993 3000 	ldrsb.w	r3, [r3]
 8000a16:	2b14      	cmp	r3, #20
 8000a18:	dd02      	ble.n	8000a20 <main+0x41c>
			Offset_for3 = 20;
 8000a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b4c <main+0x548>)
 8000a1c:	2214      	movs	r2, #20
 8000a1e:	701a      	strb	r2, [r3, #0]
		if (Offset_for3 < -20)
 8000a20:	4b4a      	ldr	r3, [pc, #296]	@ (8000b4c <main+0x548>)
 8000a22:	f993 3000 	ldrsb.w	r3, [r3]
 8000a26:	f113 0f14 	cmn.w	r3, #20
 8000a2a:	da02      	bge.n	8000a32 <main+0x42e>
			Offset_for3 = -20;
 8000a2c:	4b47      	ldr	r3, [pc, #284]	@ (8000b4c <main+0x548>)
 8000a2e:	22ec      	movs	r2, #236	@ 0xec
 8000a30:	701a      	strb	r2, [r3, #0]

		if (Offset_for4 > 20)
 8000a32:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <main+0x54c>)
 8000a34:	f993 3000 	ldrsb.w	r3, [r3]
 8000a38:	2b14      	cmp	r3, #20
 8000a3a:	dd02      	ble.n	8000a42 <main+0x43e>
			Offset_for4 = 20;
 8000a3c:	4b44      	ldr	r3, [pc, #272]	@ (8000b50 <main+0x54c>)
 8000a3e:	2214      	movs	r2, #20
 8000a40:	701a      	strb	r2, [r3, #0]
		if (Offset_for4 < -20)
 8000a42:	4b43      	ldr	r3, [pc, #268]	@ (8000b50 <main+0x54c>)
 8000a44:	f993 3000 	ldrsb.w	r3, [r3]
 8000a48:	f113 0f14 	cmn.w	r3, #20
 8000a4c:	da02      	bge.n	8000a54 <main+0x450>
			Offset_for4 = -20;
 8000a4e:	4b40      	ldr	r3, [pc, #256]	@ (8000b50 <main+0x54c>)
 8000a50:	22ec      	movs	r2, #236	@ 0xec
 8000a52:	701a      	strb	r2, [r3, #0]

		// Sprawdzanie, czy zmienił się bieg
		if (current_bieg != prev_bieg) {
 8000a54:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <main+0x53c>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <main+0x550>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	f000 809f 	beq.w	8000ba0 <main+0x59c>
			if (current_bieg == 255) {
 8000a62:	4b37      	ldr	r3, [pc, #220]	@ (8000b40 <main+0x53c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2bff      	cmp	r3, #255	@ 0xff
 8000a68:	d11f      	bne.n	8000aaa <main+0x4a6>
				// Żaden bieg nie jest wybrany → wyłącz PWM
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	483a      	ldr	r0, [pc, #232]	@ (8000b58 <main+0x554>)
 8000a6e:	f001 ff1f 	bl	80028b0 <HAL_TIM_PWM_Stop>

				// Przełącz pin na GPIO LOW
				GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
				GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a82:	2301      	movs	r3, #1
 8000a84:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	623b      	str	r3, [r7, #32]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4830      	ldr	r0, [pc, #192]	@ (8000b5c <main+0x558>)
 8000a9a:	f001 f815 	bl	8001ac8 <HAL_GPIO_Init>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	482e      	ldr	r0, [pc, #184]	@ (8000b5c <main+0x558>)
 8000aa4:	f001 f9ac 	bl	8001e00 <HAL_GPIO_WritePin>
 8000aa8:	e076      	b.n	8000b98 <main+0x594>
			} else {
				// Przełącz pin z powrotem na Alternate Function (PWM)
				GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
				GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	603b      	str	r3, [r7, #0]
				GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
				GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
				GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4822      	ldr	r0, [pc, #136]	@ (8000b5c <main+0x558>)
 8000ad2:	f000 fff9 	bl	8001ac8 <HAL_GPIO_Init>

				if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <main+0x554>)
 8000ada:	f001 fe39 	bl	8002750 <HAL_TIM_PWM_Start>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <main+0x4e4>
				{
				    Error_Handler();
 8000ae4:	f000 fa6a 	bl	8000fbc <Error_Handler>
				}

				uint32_t duty_percent = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	653b      	str	r3, [r7, #80]	@ 0x50

				switch (current_bieg) {
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <main+0x53c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d834      	bhi.n	8000b60 <main+0x55c>
 8000af6:	a201      	add	r2, pc, #4	@ (adr r2, 8000afc <main+0x4f8>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b0d 	.word	0x08000b0d
 8000b00:	08000b19 	.word	0x08000b19
 8000b04:	08000b25 	.word	0x08000b25
 8000b08:	08000b31 	.word	0x08000b31
				case 1:
					duty_percent = 25 + Offset_for1;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <main+0x540>)
 8000b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b12:	3319      	adds	r3, #25
 8000b14:	653b      	str	r3, [r7, #80]	@ 0x50
					break;
 8000b16:	e026      	b.n	8000b66 <main+0x562>
				case 2:
					duty_percent = 50 + Offset_for2;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <main+0x544>)
 8000b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b1e:	3332      	adds	r3, #50	@ 0x32
 8000b20:	653b      	str	r3, [r7, #80]	@ 0x50
					break;
 8000b22:	e020      	b.n	8000b66 <main+0x562>
				case 3:
					duty_percent = 75 + Offset_for3;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <main+0x548>)
 8000b26:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2a:	334b      	adds	r3, #75	@ 0x4b
 8000b2c:	653b      	str	r3, [r7, #80]	@ 0x50
					break;
 8000b2e:	e01a      	b.n	8000b66 <main+0x562>
				case 4:
					duty_percent = 100 + Offset_for4;
 8000b30:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <main+0x54c>)
 8000b32:	f993 3000 	ldrsb.w	r3, [r3]
 8000b36:	3364      	adds	r3, #100	@ 0x64
 8000b38:	653b      	str	r3, [r7, #80]	@ 0x50
					break;
 8000b3a:	e014      	b.n	8000b66 <main+0x562>
 8000b3c:	2000003c 	.word	0x2000003c
 8000b40:	20000001 	.word	0x20000001
 8000b44:	20000034 	.word	0x20000034
 8000b48:	20000035 	.word	0x20000035
 8000b4c:	20000036 	.word	0x20000036
 8000b50:	20000037 	.word	0x20000037
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000050 	.word	0x20000050
 8000b5c:	40020000 	.word	0x40020000
				default:
					duty_percent = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	653b      	str	r3, [r7, #80]	@ 0x50
					break;
 8000b64:	bf00      	nop
				}

				// Ogranicz duty_percent do 0…100 %
				if (duty_percent > 100)
 8000b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b68:	2b64      	cmp	r3, #100	@ 0x64
 8000b6a:	d901      	bls.n	8000b70 <main+0x56c>
					duty_percent = 100;
 8000b6c:	2364      	movs	r3, #100	@ 0x64
 8000b6e:	653b      	str	r3, [r7, #80]	@ 0x50
				if (duty_percent < 0)
					duty_percent = 0;

				uint32_t duty = ((pwm_period + 1) * duty_percent) / 100;
 8000b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b72:	3301      	adds	r3, #1
 8000b74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c74 <main+0x670>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
				if (duty > pwm_period)
 8000b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d901      	bls.n	8000b90 <main+0x58c>
				    duty = pwm_period;
 8000b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c

				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000b90:	4b39      	ldr	r3, [pc, #228]	@ (8000c78 <main+0x674>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b96:	635a      	str	r2, [r3, #52]	@ 0x34
			}

			prev_bieg = current_bieg;
 8000b98:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <main+0x678>)
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	4b38      	ldr	r3, [pc, #224]	@ (8000c80 <main+0x67c>)
 8000b9e:	701a      	strb	r2, [r3, #0]
		}

		// miganie LED
		if (HAL_GetTick() - last_led_toggle >= led_interval_ms) {
 8000ba0:	f000 fbbc 	bl	800131c <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	4b37      	ldr	r3, [pc, #220]	@ (8000c84 <main+0x680>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1ad2      	subs	r2, r2, r3
 8000bac:	4b36      	ldr	r3, [pc, #216]	@ (8000c88 <main+0x684>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d309      	bcc.n	8000bc8 <main+0x5c4>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb8:	4834      	ldr	r0, [pc, #208]	@ (8000c8c <main+0x688>)
 8000bba:	f001 f93a 	bl	8001e32 <HAL_GPIO_TogglePin>
			last_led_toggle = HAL_GetTick();
 8000bbe:	f000 fbad 	bl	800131c <HAL_GetTick>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8000c84 <main+0x680>)
 8000bc6:	6013      	str	r3, [r2, #0]
		}



		HandleSaveButton();
 8000bc8:	f000 f982 	bl	8000ed0 <HandleSaveButton>

		if (CheckOffsetsChanged() && current_bieg != 255)
 8000bcc:	f000 f946 	bl	8000e5c <CheckOffsetsChanged>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f43f ada9 	beq.w	800072a <main+0x126>
 8000bd8:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <main+0x678>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2bff      	cmp	r3, #255	@ 0xff
 8000bde:	f43f ada4 	beq.w	800072a <main+0x126>
		{
		    uint32_t duty_percent = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	64bb      	str	r3, [r7, #72]	@ 0x48

		    switch (current_bieg) {
 8000be6:	4b25      	ldr	r3, [pc, #148]	@ (8000c7c <main+0x678>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d823      	bhi.n	8000c38 <main+0x634>
 8000bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf8 <main+0x5f4>)
 8000bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000c09 	.word	0x08000c09
 8000bfc:	08000c15 	.word	0x08000c15
 8000c00:	08000c21 	.word	0x08000c21
 8000c04:	08000c2d 	.word	0x08000c2d
		        case 1: duty_percent = 25 + Offset_for1; break;
 8000c08:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <main+0x68c>)
 8000c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c0e:	3319      	adds	r3, #25
 8000c10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c12:	e014      	b.n	8000c3e <main+0x63a>
		        case 2: duty_percent = 50 + Offset_for2; break;
 8000c14:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <main+0x690>)
 8000c16:	f993 3000 	ldrsb.w	r3, [r3]
 8000c1a:	3332      	adds	r3, #50	@ 0x32
 8000c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c1e:	e00e      	b.n	8000c3e <main+0x63a>
		        case 3: duty_percent = 75 + Offset_for3; break;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <main+0x694>)
 8000c22:	f993 3000 	ldrsb.w	r3, [r3]
 8000c26:	334b      	adds	r3, #75	@ 0x4b
 8000c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c2a:	e008      	b.n	8000c3e <main+0x63a>
		        case 4: duty_percent = 100 + Offset_for4; break;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <main+0x698>)
 8000c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c32:	3364      	adds	r3, #100	@ 0x64
 8000c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c36:	e002      	b.n	8000c3e <main+0x63a>
		        default: duty_percent = 0; break;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c3c:	bf00      	nop
		    }

		    if (duty_percent > 100) duty_percent = 100;
 8000c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c40:	2b64      	cmp	r3, #100	@ 0x64
 8000c42:	d901      	bls.n	8000c48 <main+0x644>
 8000c44:	2364      	movs	r3, #100	@ 0x64
 8000c46:	64bb      	str	r3, [r7, #72]	@ 0x48
		    if (duty_percent < 0)   duty_percent = 0;

		    uint32_t duty = ((pwm_period + 1) * duty_percent) / 100;
 8000c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c4e:	fb02 f303 	mul.w	r3, r2, r3
 8000c52:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <main+0x670>)
 8000c54:	fba2 2303 	umull	r2, r3, r2, r3
 8000c58:	095b      	lsrs	r3, r3, #5
 8000c5a:	647b      	str	r3, [r7, #68]	@ 0x44
		    if (duty > pwm_period) duty = pwm_period;
 8000c5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d901      	bls.n	8000c68 <main+0x664>
 8000c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c66:	647b      	str	r3, [r7, #68]	@ 0x44

		    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty);
 8000c68:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <main+0x674>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c6e:	635a      	str	r2, [r3, #52]	@ 0x34
	while (1) {
 8000c70:	e55b      	b.n	800072a <main+0x126>
 8000c72:	bf00      	nop
 8000c74:	51eb851f 	.word	0x51eb851f
 8000c78:	20000050 	.word	0x20000050
 8000c7c:	20000001 	.word	0x20000001
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000038 	.word	0x20000038
 8000c88:	20000004 	.word	0x20000004
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	20000034 	.word	0x20000034
 8000c94:	20000035 	.word	0x20000035
 8000c98:	20000036 	.word	0x20000036
 8000c9c:	20000037 	.word	0x20000037

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	@ 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2230      	movs	r2, #48	@ 0x30
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 f9ca 	bl	8003048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <SystemClock_Config+0xb8>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <SystemClock_Config+0xb8>)
 8000cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd4:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <SystemClock_Config+0xb8>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <SystemClock_Config+0xbc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <SystemClock_Config+0xbc>)
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <SystemClock_Config+0xbc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 f8a7 	bl	8001e68 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d20:	f000 f94c 	bl	8000fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d24:	230f      	movs	r3, #15
 8000d26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fb0a 	bl	8002358 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d4a:	f000 f937 	bl	8000fbc <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	@ 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40007000 	.word	0x40007000

08000d60 <SaveOffsetsToFlash>:

/* USER CODE BEGIN 4 */
void SaveOffsetsToFlash(int8_t o1, int8_t o2, int8_t o3, int8_t o4)
{
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	b08d      	sub	sp, #52	@ 0x34
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4606      	mov	r6, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4633      	mov	r3, r6
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	4603      	mov	r3, r0
 8000d74:	71bb      	strb	r3, [r7, #6]
 8000d76:	460b      	mov	r3, r1
 8000d78:	717b      	strb	r3, [r7, #5]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	713b      	strb	r3, [r7, #4]
    OffsetsFlash_t offsets;
    offsets.signature = FLASH_SIGNATURE;
 8000d7e:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 8000d82:	843b      	strh	r3, [r7, #32]
    offsets.Offset_for1 = o1;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    offsets.Offset_for2 = o2;
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    offsets.Offset_for3 = o3;
 8000d90:	797b      	ldrb	r3, [r7, #5]
 8000d92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    offsets.Offset_for4 = o4;
 8000d96:	793b      	ldrb	r3, [r7, #4]
 8000d98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    HAL_FLASH_Unlock();
 8000d9c:	f000 fc02 	bl	80015a4 <HAL_FLASH_Unlock>

    // kasuj sektor
    FLASH_EraseInitTypeDef EraseInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
    uint32_t SectorError;

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Sector = FLASH_SECTOR;
 8000db4:	2305      	movs	r3, #5
 8000db6:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000dc0:	f107 0208 	add.w	r2, r7, #8
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fd5c 	bl	8001888 <HAL_FLASHEx_Erase>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <SaveOffsetsToFlash+0x7c>
    {
        HAL_FLASH_Lock();
 8000dd6:	f000 fc07 	bl	80015e8 <HAL_FLASH_Lock>
        return;
 8000dda:	e026      	b.n	8000e2a <SaveOffsetsToFlash+0xca>
    }

    // zapisujemy dane słowo po słowie
    uint32_t* pdata = (uint32_t*)&offsets;
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (uint32_t i = 0; i < (sizeof(OffsetsFlash_t) + 3)/4; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000de6:	e01b      	b.n	8000e20 <SaveOffsetsToFlash+0xc0>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
                              FLASH_OFFSETS_ADDR + i*4,
 8000de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dea:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 8000dee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000df2:	0099      	lsls	r1, r3, #2
                              pdata[i]) != HAL_OK)
 8000df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681b      	ldr	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000dfe:	2200      	movs	r2, #0
 8000e00:	461c      	mov	r4, r3
 8000e02:	4615      	mov	r5, r2
 8000e04:	4622      	mov	r2, r4
 8000e06:	462b      	mov	r3, r5
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f000 fb79 	bl	8001500 <HAL_FLASH_Program>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <SaveOffsetsToFlash+0xba>
        {
            HAL_FLASH_Lock();
 8000e14:	f000 fbe8 	bl	80015e8 <HAL_FLASH_Lock>
            return;
 8000e18:	e007      	b.n	8000e2a <SaveOffsetsToFlash+0xca>
    for (uint32_t i = 0; i < (sizeof(OffsetsFlash_t) + 3)/4; i++)
 8000e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d9e0      	bls.n	8000de8 <SaveOffsetsToFlash+0x88>
        }
    }

    HAL_FLASH_Lock();
 8000e26:	f000 fbdf 	bl	80015e8 <HAL_FLASH_Lock>
}
 8000e2a:	3734      	adds	r7, #52	@ 0x34
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e30 <LoadOffsetsFromFlash>:

OffsetsFlash_t* LoadOffsetsFromFlash(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
    OffsetsFlash_t* ptr = (OffsetsFlash_t*)FLASH_OFFSETS_ADDR;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <LoadOffsetsFromFlash+0x28>)
 8000e38:	607b      	str	r3, [r7, #4]
    if (ptr->signature == FLASH_SIGNATURE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <LoadOffsetsFromFlash+0x1a>
    {
        return ptr;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	e000      	b.n	8000e4c <LoadOffsetsFromFlash+0x1c>
    }
    else
    {
        return NULL;
 8000e4a:	2300      	movs	r3, #0
    }
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	08020000 	.word	0x08020000

08000e5c <CheckOffsetsChanged>:


uint8_t CheckOffsetsChanged(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
    if (Offset_for1 != saved_offsets.Offset_for1) return 1;
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <CheckOffsetsChanged+0x60>)
 8000e62:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <CheckOffsetsChanged+0x64>)
 8000e68:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d001      	beq.n	8000e74 <CheckOffsetsChanged+0x18>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e01e      	b.n	8000eb2 <CheckOffsetsChanged+0x56>
    if (Offset_for2 != saved_offsets.Offset_for2) return 1;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <CheckOffsetsChanged+0x60>)
 8000e76:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <CheckOffsetsChanged+0x68>)
 8000e7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d001      	beq.n	8000e88 <CheckOffsetsChanged+0x2c>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e014      	b.n	8000eb2 <CheckOffsetsChanged+0x56>
    if (Offset_for3 != saved_offsets.Offset_for3) return 1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <CheckOffsetsChanged+0x60>)
 8000e8a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <CheckOffsetsChanged+0x6c>)
 8000e90:	f993 3000 	ldrsb.w	r3, [r3]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d001      	beq.n	8000e9c <CheckOffsetsChanged+0x40>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e00a      	b.n	8000eb2 <CheckOffsetsChanged+0x56>
    if (Offset_for4 != saved_offsets.Offset_for4) return 1;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <CheckOffsetsChanged+0x60>)
 8000e9e:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <CheckOffsetsChanged+0x70>)
 8000ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d001      	beq.n	8000eb0 <CheckOffsetsChanged+0x54>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <CheckOffsetsChanged+0x56>
    return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000040 	.word	0x20000040
 8000ec0:	20000034 	.word	0x20000034
 8000ec4:	20000035 	.word	0x20000035
 8000ec8:	20000036 	.word	0x20000036
 8000ecc:	20000037 	.word	0x20000037

08000ed0 <HandleSaveButton>:



void HandleSaveButton(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
    static uint32_t last_save_time = 0;

    // zapal LED jeśli zmienione offsety
    if (CheckOffsetsChanged())
 8000ed6:	f7ff ffc1 	bl	8000e5c <CheckOffsetsChanged>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <HandleSaveButton+0x1c>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	482d      	ldr	r0, [pc, #180]	@ (8000f9c <HandleSaveButton+0xcc>)
 8000ee6:	f000 ff8b 	bl	8001e00 <HAL_GPIO_WritePin>
 8000eea:	e004      	b.n	8000ef6 <HandleSaveButton+0x26>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2102      	movs	r1, #2
 8000ef0:	482a      	ldr	r0, [pc, #168]	@ (8000f9c <HandleSaveButton+0xcc>)
 8000ef2:	f000 ff85 	bl	8001e00 <HAL_GPIO_WritePin>
    }

    uint8_t save_pressed = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET);
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4828      	ldr	r0, [pc, #160]	@ (8000f9c <HandleSaveButton+0xcc>)
 8000efa:	f000 ff69 	bl	8001dd0 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	bf0c      	ite	eq
 8000f04:	2301      	moveq	r3, #1
 8000f06:	2300      	movne	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	71fb      	strb	r3, [r7, #7]
    static uint8_t prev_save_pressed = 0;
    if (save_pressed && !prev_save_pressed && (HAL_GetTick() - last_save_time > SAVE_DEBOUNCE_MS))
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d03c      	beq.n	8000f8c <HandleSaveButton+0xbc>
 8000f12:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <HandleSaveButton+0xd0>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d138      	bne.n	8000f8c <HandleSaveButton+0xbc>
 8000f1a:	f000 f9ff 	bl	800131c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HandleSaveButton+0xd4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f28:	d930      	bls.n	8000f8c <HandleSaveButton+0xbc>
    {
        if (CheckOffsetsChanged())
 8000f2a:	f7ff ff97 	bl	8000e5c <CheckOffsetsChanged>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d026      	beq.n	8000f82 <HandleSaveButton+0xb2>
        {
            // Zapisz offsety do flash
            SaveOffsetsToFlash(Offset_for1, Offset_for2, Offset_for3, Offset_for4);
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <HandleSaveButton+0xd8>)
 8000f36:	f993 0000 	ldrsb.w	r0, [r3]
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <HandleSaveButton+0xdc>)
 8000f3c:	f993 1000 	ldrsb.w	r1, [r3]
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <HandleSaveButton+0xe0>)
 8000f42:	f993 2000 	ldrsb.w	r2, [r3]
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <HandleSaveButton+0xe4>)
 8000f48:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4c:	f7ff ff08 	bl	8000d60 <SaveOffsetsToFlash>

            // Zaktualizuj saved_offsets
            saved_offsets.Offset_for1 = Offset_for1;
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HandleSaveButton+0xd8>)
 8000f52:	f993 2000 	ldrsb.w	r2, [r3]
 8000f56:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <HandleSaveButton+0xe8>)
 8000f58:	709a      	strb	r2, [r3, #2]
            saved_offsets.Offset_for2 = Offset_for2;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <HandleSaveButton+0xdc>)
 8000f5c:	f993 2000 	ldrsb.w	r2, [r3]
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HandleSaveButton+0xe8>)
 8000f62:	70da      	strb	r2, [r3, #3]
            saved_offsets.Offset_for3 = Offset_for3;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HandleSaveButton+0xe0>)
 8000f66:	f993 2000 	ldrsb.w	r2, [r3]
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HandleSaveButton+0xe8>)
 8000f6c:	711a      	strb	r2, [r3, #4]
            saved_offsets.Offset_for4 = Offset_for4;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <HandleSaveButton+0xe4>)
 8000f70:	f993 2000 	ldrsb.w	r2, [r3]
 8000f74:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HandleSaveButton+0xe8>)
 8000f76:	715a      	strb	r2, [r3, #5]

            // Zgaś SaveLed po zapisie
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HandleSaveButton+0xcc>)
 8000f7e:	f000 ff3f 	bl	8001e00 <HAL_GPIO_WritePin>
        }

        last_save_time = HAL_GetTick();
 8000f82:	f000 f9cb 	bl	800131c <HAL_GetTick>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <HandleSaveButton+0xd4>)
 8000f8a:	6013      	str	r3, [r2, #0]
    }
    prev_save_pressed = save_pressed;
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <HandleSaveButton+0xd0>)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	7013      	strb	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	20000048 	.word	0x20000048
 8000fa4:	2000004c 	.word	0x2000004c
 8000fa8:	20000034 	.word	0x20000034
 8000fac:	20000035 	.word	0x20000035
 8000fb0:	20000036 	.word	0x20000036
 8000fb4:	20000037 	.word	0x20000037
 8000fb8:	20000040 	.word	0x20000040

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <Error_Handler+0x8>

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <HAL_MspInit+0x4c>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <HAL_MspInit+0x4c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_MspInit+0x4c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_MspInit+0x4c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 f941 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010be:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <MX_TIM2_Init+0xac>)
 80010c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <MX_TIM2_Init+0xac>)
 80010c8:	220f      	movs	r2, #15
 80010ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <MX_TIM2_Init+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <MX_TIM2_Init+0xac>)
 80010d4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <MX_TIM2_Init+0xac>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e0:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <MX_TIM2_Init+0xac>)
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e6:	4818      	ldr	r0, [pc, #96]	@ (8001148 <MX_TIM2_Init+0xac>)
 80010e8:	f001 fae2 	bl	80026b0 <HAL_TIM_PWM_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010f2:	f7ff ff63 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	4619      	mov	r1, r3
 8001104:	4810      	ldr	r0, [pc, #64]	@ (8001148 <MX_TIM2_Init+0xac>)
 8001106:	f001 ff31 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001110:	f7ff ff54 	bl	8000fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	2360      	movs	r3, #96	@ 0x60
 8001116:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <MX_TIM2_Init+0xac>)
 800112c:	f001 fc24 	bl	8002978 <HAL_TIM_PWM_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001136:	f7ff ff41 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800113a:	4803      	ldr	r0, [pc, #12]	@ (8001148 <MX_TIM2_Init+0xac>)
 800113c:	f000 f826 	bl	800118c <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000050 	.word	0x20000050

0800114c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800115c:	d10d      	bne.n	800117a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_TIM_PWM_MspInit+0x3c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_TIM_PWM_MspInit+0x3c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6413      	str	r3, [r2, #64]	@ 0x40
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_TIM_PWM_MspInit+0x3c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ac:	d11d      	bne.n	80011ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <HAL_TIM_MspPostInit+0x68>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_TIM_MspPostInit+0x68>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HAL_TIM_MspPostInit+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011da:	2301      	movs	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <HAL_TIM_MspPostInit+0x6c>)
 80011e6:	f000 fc6f 	bl	8001ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001234 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001200:	f7ff ff3a 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	@ (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f001 ff15 	bl	8003058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f9e9 	bl	8000604 <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001240:	080030d8 	.word	0x080030d8
  ldr r2, =_sbss
 8001244:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001248:	200000bc 	.word	0x200000bc

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f90d 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	200f      	movs	r0, #15
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fea0 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f917 	bl	80014e6 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f8ed 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20000014 	.word	0x20000014
 80012f0:	20000010 	.word	0x20000010

080012f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x20>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x24>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <HAL_IncTick+0x24>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000014 	.word	0x20000014
 8001318:	20000098 	.word	0x20000098

0800131c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <HAL_GetTick+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000098 	.word	0x20000098

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff47 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff5c 	bl	800137c <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff8e 	bl	80013ec <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5d 	bl	8001398 <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffb0 	bl	8001454 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800150e:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_FLASH_Program+0x9c>)
 8001510:	7e1b      	ldrb	r3, [r3, #24]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_FLASH_Program+0x1a>
 8001516:	2302      	movs	r3, #2
 8001518:	e03b      	b.n	8001592 <HAL_FLASH_Program+0x92>
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_FLASH_Program+0x9c>)
 800151c:	2201      	movs	r2, #1
 800151e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001520:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001524:	f000 f870 	bl	8001608 <FLASH_WaitForLastOperation>
 8001528:	4603      	mov	r3, r0
 800152a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d12b      	bne.n	800158a <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001538:	783b      	ldrb	r3, [r7, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f000 f91b 	bl	8001778 <FLASH_Program_Byte>
 8001542:	e016      	b.n	8001572 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d105      	bne.n	8001556 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800154a:	883b      	ldrh	r3, [r7, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	68b8      	ldr	r0, [r7, #8]
 8001550:	f000 f8ee 	bl	8001730 <FLASH_Program_HalfWord>
 8001554:	e00d      	b.n	8001572 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d105      	bne.n	8001568 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f000 f8c3 	bl	80016ec <FLASH_Program_Word>
 8001566:	e004      	b.n	8001572 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f000 f88b 	bl	8001688 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001572:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001576:	f000 f847 	bl	8001608 <FLASH_WaitForLastOperation>
 800157a:	4603      	mov	r3, r0
 800157c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_FLASH_Program+0xa0>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_FLASH_Program+0xa0>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800158a:	4b04      	ldr	r3, [pc, #16]	@ (800159c <HAL_FLASH_Program+0x9c>)
 800158c:	2200      	movs	r2, #0
 800158e:	761a      	strb	r2, [r3, #24]

  return status;
 8001590:	7dfb      	ldrb	r3, [r7, #23]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000009c 	.word	0x2000009c
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_FLASH_Unlock+0x38>)
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da0b      	bge.n	80015ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_FLASH_Unlock+0x38>)
 80015b8:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <HAL_FLASH_Unlock+0x3c>)
 80015ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <HAL_FLASH_Unlock+0x38>)
 80015be:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_FLASH_Unlock+0x40>)
 80015c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_FLASH_Unlock+0x38>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da01      	bge.n	80015ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40023c00 	.word	0x40023c00
 80015e0:	45670123 	.word	0x45670123
 80015e4:	cdef89ab 	.word	0xcdef89ab

080015e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_FLASH_Lock+0x1c>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_FLASH_Lock+0x1c>)
 80015f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015f6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40023c00 	.word	0x40023c00

08001608 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <FLASH_WaitForLastOperation+0x78>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800161a:	f7ff fe7f 	bl	800131c <HAL_GetTick>
 800161e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001620:	e010      	b.n	8001644 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d00c      	beq.n	8001644 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d007      	beq.n	8001640 <FLASH_WaitForLastOperation+0x38>
 8001630:	f7ff fe74 	bl	800131c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d201      	bcs.n	8001644 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e019      	b.n	8001678 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <FLASH_WaitForLastOperation+0x7c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e8      	bne.n	8001622 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <FLASH_WaitForLastOperation+0x7c>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <FLASH_WaitForLastOperation+0x7c>)
 800165e:	2201      	movs	r2, #1
 8001660:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <FLASH_WaitForLastOperation+0x7c>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800166e:	f000 f8a5 	bl	80017bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0

}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000009c 	.word	0x2000009c
 8001684:	40023c00 	.word	0x40023c00

08001688 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <FLASH_Program_DoubleWord+0x60>)
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	4a13      	ldr	r2, [pc, #76]	@ (80016e8 <FLASH_Program_DoubleWord+0x60>)
 800169a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800169e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <FLASH_Program_DoubleWord+0x60>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <FLASH_Program_DoubleWord+0x60>)
 80016a6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80016aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <FLASH_Program_DoubleWord+0x60>)
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <FLASH_Program_DoubleWord+0x60>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80016be:	f3bf 8f6f 	isb	sy
}
 80016c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80016c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	000a      	movs	r2, r1
 80016d2:	2300      	movs	r3, #0
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	3104      	adds	r1, #4
 80016d8:	4613      	mov	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40023c00 	.word	0x40023c00

080016ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <FLASH_Program_Word+0x40>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	@ (800172c <FLASH_Program_Word+0x40>)
 80016fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001700:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <FLASH_Program_Word+0x40>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <FLASH_Program_Word+0x40>)
 8001708:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800170c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <FLASH_Program_Word+0x40>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	4a06      	ldr	r2, [pc, #24]	@ (800172c <FLASH_Program_Word+0x40>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40023c00 	.word	0x40023c00

08001730 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <FLASH_Program_HalfWord+0x44>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <FLASH_Program_HalfWord+0x44>)
 8001742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001746:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <FLASH_Program_HalfWord+0x44>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <FLASH_Program_HalfWord+0x44>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001752:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <FLASH_Program_HalfWord+0x44>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <FLASH_Program_HalfWord+0x44>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	801a      	strh	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00

08001778 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <FLASH_Program_Byte+0x40>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	4a0b      	ldr	r2, [pc, #44]	@ (80017b8 <FLASH_Program_Byte+0x40>)
 800178a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800178e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <FLASH_Program_Byte+0x40>)
 8001792:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <FLASH_Program_Byte+0x40>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <FLASH_Program_Byte+0x40>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <FLASH_Program_Byte+0x40>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	701a      	strb	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00

080017bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80017c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 80017d6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80017d8:	4b29      	ldr	r3, [pc, #164]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 80017da:	2210      	movs	r2, #16
 80017dc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80017de:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	4a24      	ldr	r2, [pc, #144]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 80017f4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80017f6:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 80017f8:	2220      	movs	r2, #32
 80017fa:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80017fc:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001808:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	4a1c      	ldr	r2, [pc, #112]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 8001812:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001814:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 8001816:	2240      	movs	r2, #64	@ 0x40
 8001818:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	4a15      	ldr	r2, [pc, #84]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 8001830:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001832:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 8001834:	2280      	movs	r2, #128	@ 0x80
 8001836:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d009      	beq.n	8001858 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 800184e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 8001852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001856:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001858:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <FLASH_SetErrorCode+0xc8>)
 800186e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <FLASH_SetErrorCode+0xc4>)
 8001872:	2202      	movs	r2, #2
 8001874:	60da      	str	r2, [r3, #12]
  }
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40023c00 	.word	0x40023c00
 8001884:	2000009c 	.word	0x2000009c

08001888 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001896:	4b31      	ldr	r3, [pc, #196]	@ (800195c <HAL_FLASHEx_Erase+0xd4>)
 8001898:	7e1b      	ldrb	r3, [r3, #24]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_FLASHEx_Erase+0x1a>
 800189e:	2302      	movs	r3, #2
 80018a0:	e058      	b.n	8001954 <HAL_FLASHEx_Erase+0xcc>
 80018a2:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <HAL_FLASHEx_Erase+0xd4>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018ac:	f7ff feac 	bl	8001608 <FLASH_WaitForLastOperation>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d148      	bne.n	800194c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d115      	bne.n	80018f6 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f000 f844 	bl	8001964 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018e0:	f7ff fe92 	bl	8001608 <FLASH_WaitForLastOperation>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <HAL_FLASHEx_Erase+0xd8>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001960 <HAL_FLASHEx_Erase+0xd8>)
 80018ee:	f023 0304 	bic.w	r3, r3, #4
 80018f2:	6113      	str	r3, [r2, #16]
 80018f4:	e028      	b.n	8001948 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e01c      	b.n	8001938 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4619      	mov	r1, r3
 8001906:	68b8      	ldr	r0, [r7, #8]
 8001908:	f000 f850 	bl	80019ac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800190c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001910:	f7ff fe7a 	bl	8001608 <FLASH_WaitForLastOperation>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_FLASHEx_Erase+0xd8>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4a10      	ldr	r2, [pc, #64]	@ (8001960 <HAL_FLASHEx_Erase+0xd8>)
 800191e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001922:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	601a      	str	r2, [r3, #0]
          break;
 8001930:	e00a      	b.n	8001948 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	3301      	adds	r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4413      	add	r3, r2
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	429a      	cmp	r2, r3
 8001946:	d3da      	bcc.n	80018fe <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001948:	f000 f878 	bl	8001a3c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <HAL_FLASHEx_Erase+0xd4>)
 800194e:	2200      	movs	r2, #0
 8001950:	761a      	strb	r2, [r3, #24]

  return status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000009c 	.word	0x2000009c
 8001960:	40023c00 	.word	0x40023c00

08001964 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <FLASH_MassErase+0x44>)
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	4a0c      	ldr	r2, [pc, #48]	@ (80019a8 <FLASH_MassErase+0x44>)
 8001976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800197a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <FLASH_MassErase+0x44>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <FLASH_MassErase+0x44>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <FLASH_MassErase+0x44>)
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	4313      	orrs	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <FLASH_MassErase+0x44>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001998:	6113      	str	r3, [r2, #16]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00

080019ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e010      	b.n	80019ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d103      	bne.n	80019d6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80019ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e009      	b.n	80019ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d103      	bne.n	80019e4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80019dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e002      	b.n	80019ea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80019e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 80019f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	490f      	ldr	r1, [pc, #60]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	4a0c      	ldr	r2, [pc, #48]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 8001a08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001a0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	4a07      	ldr	r2, [pc, #28]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <FLASH_Erase_Sector+0x8c>)
 8001a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2a:	6113      	str	r3, [r2, #16]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40023c00 	.word	0x40023c00

08001a3c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001a40:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d017      	beq.n	8001a7c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a52:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a56:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a16      	ldr	r2, [pc, #88]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001a6e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a13      	ldr	r2, [pc, #76]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d017      	beq.n	8001ab8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001a92:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001a9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001aa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001aaa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <FLASH_FlushCaches+0x88>)
 8001ab2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ab6:	6013      	str	r3, [r2, #0]
  }
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e159      	b.n	8001d98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 8148 	bne.w	8001d92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d005      	beq.n	8001b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d017      	beq.n	8001bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	69b9      	ldr	r1, [r7, #24]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a2 	beq.w	8001d92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b57      	ldr	r3, [pc, #348]	@ (8001db0 <HAL_GPIO_Init+0x2e8>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	4a56      	ldr	r2, [pc, #344]	@ (8001db0 <HAL_GPIO_Init+0x2e8>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c5e:	4b54      	ldr	r3, [pc, #336]	@ (8001db0 <HAL_GPIO_Init+0x2e8>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c6a:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <HAL_GPIO_Init+0x2ec>)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a49      	ldr	r2, [pc, #292]	@ (8001db8 <HAL_GPIO_Init+0x2f0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d019      	beq.n	8001cca <HAL_GPIO_Init+0x202>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a48      	ldr	r2, [pc, #288]	@ (8001dbc <HAL_GPIO_Init+0x2f4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_GPIO_Init+0x1fe>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a47      	ldr	r2, [pc, #284]	@ (8001dc0 <HAL_GPIO_Init+0x2f8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00d      	beq.n	8001cc2 <HAL_GPIO_Init+0x1fa>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a46      	ldr	r2, [pc, #280]	@ (8001dc4 <HAL_GPIO_Init+0x2fc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d007      	beq.n	8001cbe <HAL_GPIO_Init+0x1f6>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a45      	ldr	r2, [pc, #276]	@ (8001dc8 <HAL_GPIO_Init+0x300>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_GPIO_Init+0x1f2>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x204>
 8001cba:	2307      	movs	r3, #7
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x204>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x204>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x204>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x204>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cdc:	4935      	ldr	r1, [pc, #212]	@ (8001db4 <HAL_GPIO_Init+0x2ec>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b38      	ldr	r3, [pc, #224]	@ (8001dcc <HAL_GPIO_Init+0x304>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001dcc <HAL_GPIO_Init+0x304>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <HAL_GPIO_Init+0x304>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d38:	4a24      	ldr	r2, [pc, #144]	@ (8001dcc <HAL_GPIO_Init+0x304>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3e:	4b23      	ldr	r3, [pc, #140]	@ (8001dcc <HAL_GPIO_Init+0x304>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d62:	4a1a      	ldr	r2, [pc, #104]	@ (8001dcc <HAL_GPIO_Init+0x304>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d68:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_GPIO_Init+0x304>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001dcc <HAL_GPIO_Init+0x304>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f aea2 	bls.w	8001ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	@ 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e001      	b.n	8001df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e10:	787b      	ldrb	r3, [r7, #1]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e1c:	e003      	b.n	8001e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	619a      	str	r2, [r3, #24]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e44:	887a      	ldrh	r2, [r7, #2]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	041a      	lsls	r2, r3, #16
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	887b      	ldrh	r3, [r7, #2]
 8001e52:	400b      	ands	r3, r1
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	619a      	str	r2, [r3, #24]
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e267      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d075      	beq.n	8001f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e86:	4b88      	ldr	r3, [pc, #544]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d00c      	beq.n	8001eac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e92:	4b85      	ldr	r3, [pc, #532]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d112      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b82      	ldr	r3, [pc, #520]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	4b7e      	ldr	r3, [pc, #504]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d05b      	beq.n	8001f70 <HAL_RCC_OscConfig+0x108>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d157      	bne.n	8001f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e242      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_OscConfig+0x74>
 8001ece:	4b76      	ldr	r3, [pc, #472]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a75      	ldr	r2, [pc, #468]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x98>
 8001ee6:	4b70      	ldr	r3, [pc, #448]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6f      	ldr	r2, [pc, #444]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6c      	ldr	r2, [pc, #432]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001f00:	4b69      	ldr	r3, [pc, #420]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a68      	ldr	r2, [pc, #416]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b66      	ldr	r3, [pc, #408]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a65      	ldr	r2, [pc, #404]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff f9fc 	bl	800131c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f9f8 	bl	800131c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	@ 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e207      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xc0>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff f9e8 	bl	800131c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff f9e4 	bl	800131c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	@ 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1f3      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	4b51      	ldr	r3, [pc, #324]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0xe8>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d063      	beq.n	8002046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8a:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b44      	ldr	r3, [pc, #272]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	4b41      	ldr	r3, [pc, #260]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x152>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1c7      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b3b      	ldr	r3, [pc, #236]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4937      	ldr	r1, [pc, #220]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	e03a      	b.n	8002046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd8:	4b34      	ldr	r3, [pc, #208]	@ (80020ac <HAL_RCC_OscConfig+0x244>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7ff f99d 	bl	800131c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff f999 	bl	800131c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1a8      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4925      	ldr	r1, [pc, #148]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201a:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_RCC_OscConfig+0x244>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f97c 	bl	800131c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002028:	f7ff f978 	bl	800131c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e187      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d036      	beq.n	80020c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d016      	beq.n	8002088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <HAL_RCC_OscConfig+0x248>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7ff f95c 	bl	800131c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002068:	f7ff f958 	bl	800131c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e167      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_OscConfig+0x240>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x200>
 8002086:	e01b      	b.n	80020c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_OscConfig+0x248>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff f945 	bl	800131c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	e00e      	b.n	80020b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff f941 	bl	800131c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d907      	bls.n	80020b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e150      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	42470000 	.word	0x42470000
 80020b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b88      	ldr	r3, [pc, #544]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ea      	bne.n	8002096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8097 	beq.w	80021fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b81      	ldr	r3, [pc, #516]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b7d      	ldr	r3, [pc, #500]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a7c      	ldr	r2, [pc, #496]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b7a      	ldr	r3, [pc, #488]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b77      	ldr	r3, [pc, #476]	@ (80022dc <HAL_RCC_OscConfig+0x474>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b74      	ldr	r3, [pc, #464]	@ (80022dc <HAL_RCC_OscConfig+0x474>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a73      	ldr	r2, [pc, #460]	@ (80022dc <HAL_RCC_OscConfig+0x474>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7ff f901 	bl	800131c <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7ff f8fd 	bl	800131c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e10c      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	4b6a      	ldr	r3, [pc, #424]	@ (80022dc <HAL_RCC_OscConfig+0x474>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x2ea>
 8002144:	4b64      	ldr	r3, [pc, #400]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	4a63      	ldr	r2, [pc, #396]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002150:	e01c      	b.n	800218c <HAL_RCC_OscConfig+0x324>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x30c>
 800215a:	4b5f      	ldr	r3, [pc, #380]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	4a5e      	ldr	r2, [pc, #376]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6713      	str	r3, [r2, #112]	@ 0x70
 8002166:	4b5c      	ldr	r3, [pc, #368]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216a:	4a5b      	ldr	r2, [pc, #364]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	@ 0x70
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0x324>
 8002174:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002178:	4a57      	ldr	r2, [pc, #348]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002180:	4b55      	ldr	r3, [pc, #340]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002184:	4a54      	ldr	r2, [pc, #336]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 0304 	bic.w	r3, r3, #4
 800218a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d015      	beq.n	80021c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f8c2 	bl	800131c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff f8be 	bl	800131c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0cb      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	4b49      	ldr	r3, [pc, #292]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ee      	beq.n	800219c <HAL_RCC_OscConfig+0x334>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7ff f8ac 	bl	800131c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7ff f8a8 	bl	800131c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0b5      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	4b3e      	ldr	r3, [pc, #248]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ee      	bne.n	80021c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b39      	ldr	r3, [pc, #228]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	4a38      	ldr	r2, [pc, #224]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a1 	beq.w	8002348 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002206:	4b34      	ldr	r3, [pc, #208]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d05c      	beq.n	80022cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d141      	bne.n	800229e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <HAL_RCC_OscConfig+0x478>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff f87c 	bl	800131c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff f878 	bl	800131c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e087      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	3b01      	subs	r3, #1
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	491b      	ldr	r1, [pc, #108]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff f851 	bl	800131c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff f84d 	bl	800131c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e05c      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x416>
 800229c:	e054      	b.n	8002348 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <HAL_RCC_OscConfig+0x478>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f83a 	bl	800131c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7ff f836 	bl	800131c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e045      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x444>
 80022ca:	e03d      	b.n	8002348 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e038      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCC_OscConfig+0x4ec>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d028      	beq.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d121      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d11a      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002314:	4013      	ands	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800231a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800231c:	4293      	cmp	r3, r2
 800231e:	d111      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	3b01      	subs	r3, #1
 800232e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0cc      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b68      	ldr	r3, [pc, #416]	@ (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d90c      	bls.n	8002394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b65      	ldr	r3, [pc, #404]	@ (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	@ (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a58      	ldr	r2, [pc, #352]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a52      	ldr	r2, [pc, #328]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d044      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d119      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	2b03      	cmp	r3, #3
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b3f      	ldr	r3, [pc, #252]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e067      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b37      	ldr	r3, [pc, #220]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4934      	ldr	r1, [pc, #208]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7fe ff68 	bl	800131c <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe ff64 	bl	800131c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b25      	ldr	r3, [pc, #148]	@ (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d20c      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b22      	ldr	r3, [pc, #136]	@ (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ca:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	@ (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	@ (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fec8 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00
 8002514:	40023800 	.word	0x40023800
 8002518:	080030b8 	.word	0x080030b8
 800251c:	2000000c 	.word	0x2000000c
 8002520:	20000010 	.word	0x20000010

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b090      	sub	sp, #64	@ 0x40
 800252a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253c:	4b59      	ldr	r3, [pc, #356]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d00d      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x40>
 8002548:	2b08      	cmp	r3, #8
 800254a:	f200 80a1 	bhi.w	8002690 <HAL_RCC_GetSysClockFreq+0x16c>
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x34>
 8002552:	2b04      	cmp	r3, #4
 8002554:	d003      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x3a>
 8002556:	e09b      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800255c:	e09b      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002560:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002562:	e098      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002564:	4b4f      	ldr	r3, [pc, #316]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256e:	4b4d      	ldr	r3, [pc, #308]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d028      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4b4a      	ldr	r3, [pc, #296]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	2200      	movs	r2, #0
 8002582:	623b      	str	r3, [r7, #32]
 8002584:	627a      	str	r2, [r7, #36]	@ 0x24
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800258c:	2100      	movs	r1, #0
 800258e:	4b47      	ldr	r3, [pc, #284]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002590:	fb03 f201 	mul.w	r2, r3, r1
 8002594:	2300      	movs	r3, #0
 8002596:	fb00 f303 	mul.w	r3, r0, r3
 800259a:	4413      	add	r3, r2
 800259c:	4a43      	ldr	r2, [pc, #268]	@ (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 800259e:	fba0 1202 	umull	r1, r2, r0, r2
 80025a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025a4:	460a      	mov	r2, r1
 80025a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025aa:	4413      	add	r3, r2
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b0:	2200      	movs	r2, #0
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	61fa      	str	r2, [r7, #28]
 80025b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025be:	f7fd fe09 	bl	80001d4 <__aeabi_uldivmod>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4613      	mov	r3, r2
 80025c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ca:	e053      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4b35      	ldr	r3, [pc, #212]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	2200      	movs	r2, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	617a      	str	r2, [r7, #20]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025de:	f04f 0b00 	mov.w	fp, #0
 80025e2:	4652      	mov	r2, sl
 80025e4:	465b      	mov	r3, fp
 80025e6:	f04f 0000 	mov.w	r0, #0
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f4:	0150      	lsls	r0, r2, #5
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	ebb2 080a 	subs.w	r8, r2, sl
 80025fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800260e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002612:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002616:	ebb2 0408 	subs.w	r4, r2, r8
 800261a:	eb63 0509 	sbc.w	r5, r3, r9
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	00eb      	lsls	r3, r5, #3
 8002628:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800262c:	00e2      	lsls	r2, r4, #3
 800262e:	4614      	mov	r4, r2
 8002630:	461d      	mov	r5, r3
 8002632:	eb14 030a 	adds.w	r3, r4, sl
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	eb45 030b 	adc.w	r3, r5, fp
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800264a:	4629      	mov	r1, r5
 800264c:	028b      	lsls	r3, r1, #10
 800264e:	4621      	mov	r1, r4
 8002650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002654:	4621      	mov	r1, r4
 8002656:	028a      	lsls	r2, r1, #10
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265e:	2200      	movs	r2, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	60fa      	str	r2, [r7, #12]
 8002664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002668:	f7fd fdb4 	bl	80001d4 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	3301      	adds	r3, #1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002684:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800268e:	e002      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002692:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002698:	4618      	mov	r0, r3
 800269a:	3740      	adds	r7, #64	@ 0x40
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	017d7840 	.word	0x017d7840

080026b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e041      	b.n	8002746 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fd38 	bl	800114c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f000 fa04 	bl	8002afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_TIM_PWM_Start+0x24>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e022      	b.n	80027ba <HAL_TIM_PWM_Start+0x6a>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b04      	cmp	r3, #4
 8002778:	d109      	bne.n	800278e <HAL_TIM_PWM_Start+0x3e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	bf14      	ite	ne
 8002786:	2301      	movne	r3, #1
 8002788:	2300      	moveq	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	e015      	b.n	80027ba <HAL_TIM_PWM_Start+0x6a>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d109      	bne.n	80027a8 <HAL_TIM_PWM_Start+0x58>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e008      	b.n	80027ba <HAL_TIM_PWM_Start+0x6a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e068      	b.n	8002894 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d104      	bne.n	80027d2 <HAL_TIM_PWM_Start+0x82>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027d0:	e013      	b.n	80027fa <HAL_TIM_PWM_Start+0xaa>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d104      	bne.n	80027e2 <HAL_TIM_PWM_Start+0x92>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027e0:	e00b      	b.n	80027fa <HAL_TIM_PWM_Start+0xaa>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d104      	bne.n	80027f2 <HAL_TIM_PWM_Start+0xa2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027f0:	e003      	b.n	80027fa <HAL_TIM_PWM_Start+0xaa>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fb8c 	bl	8002f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a23      	ldr	r2, [pc, #140]	@ (800289c <HAL_TIM_PWM_Start+0x14c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d107      	bne.n	8002822 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002820:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <HAL_TIM_PWM_Start+0x14c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d018      	beq.n	800285e <HAL_TIM_PWM_Start+0x10e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002834:	d013      	beq.n	800285e <HAL_TIM_PWM_Start+0x10e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a19      	ldr	r2, [pc, #100]	@ (80028a0 <HAL_TIM_PWM_Start+0x150>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_TIM_PWM_Start+0x10e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_TIM_PWM_Start+0x154>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_TIM_PWM_Start+0x10e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <HAL_TIM_PWM_Start+0x158>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_TIM_PWM_Start+0x10e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <HAL_TIM_PWM_Start+0x15c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d111      	bne.n	8002882 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b06      	cmp	r3, #6
 800286e:	d010      	beq.n	8002892 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	e007      	b.n	8002892 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40010000 	.word	0x40010000
 80028a0:	40000400 	.word	0x40000400
 80028a4:	40000800 	.word	0x40000800
 80028a8:	40000c00 	.word	0x40000c00
 80028ac:	40014000 	.word	0x40014000

080028b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	6839      	ldr	r1, [r7, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fb2c 	bl	8002f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <HAL_TIM_PWM_Stop+0xc4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d117      	bne.n	8002902 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6a1a      	ldr	r2, [r3, #32]
 80028d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_TIM_PWM_Stop+0x52>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	f240 4344 	movw	r3, #1092	@ 0x444
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d107      	bne.n	8002902 <HAL_TIM_PWM_Stop+0x52>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	f241 1311 	movw	r3, #4369	@ 0x1111
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <HAL_TIM_PWM_Stop+0x82>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	f240 4344 	movw	r3, #1092	@ 0x444
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <HAL_TIM_PWM_Stop+0x82>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d104      	bne.n	8002942 <HAL_TIM_PWM_Stop+0x92>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002940:	e013      	b.n	800296a <HAL_TIM_PWM_Stop+0xba>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d104      	bne.n	8002952 <HAL_TIM_PWM_Stop+0xa2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002950:	e00b      	b.n	800296a <HAL_TIM_PWM_Stop+0xba>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d104      	bne.n	8002962 <HAL_TIM_PWM_Stop+0xb2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002960:	e003      	b.n	800296a <HAL_TIM_PWM_Stop+0xba>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40010000 	.word	0x40010000

08002978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002992:	2302      	movs	r3, #2
 8002994:	e0ae      	b.n	8002af4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	f200 809f 	bhi.w	8002ae4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029e1 	.word	0x080029e1
 80029b0:	08002ae5 	.word	0x08002ae5
 80029b4:	08002ae5 	.word	0x08002ae5
 80029b8:	08002ae5 	.word	0x08002ae5
 80029bc:	08002a21 	.word	0x08002a21
 80029c0:	08002ae5 	.word	0x08002ae5
 80029c4:	08002ae5 	.word	0x08002ae5
 80029c8:	08002ae5 	.word	0x08002ae5
 80029cc:	08002a63 	.word	0x08002a63
 80029d0:	08002ae5 	.word	0x08002ae5
 80029d4:	08002ae5 	.word	0x08002ae5
 80029d8:	08002ae5 	.word	0x08002ae5
 80029dc:	08002aa3 	.word	0x08002aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f90e 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0208 	orr.w	r2, r2, #8
 80029fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0204 	bic.w	r2, r2, #4
 8002a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6999      	ldr	r1, [r3, #24]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	619a      	str	r2, [r3, #24]
      break;
 8002a1e:	e064      	b.n	8002aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f954 	bl	8002cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6999      	ldr	r1, [r3, #24]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	021a      	lsls	r2, r3, #8
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	619a      	str	r2, [r3, #24]
      break;
 8002a60:	e043      	b.n	8002aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f99f 	bl	8002dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0208 	orr.w	r2, r2, #8
 8002a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0204 	bic.w	r2, r2, #4
 8002a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69d9      	ldr	r1, [r3, #28]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
      break;
 8002aa0:	e023      	b.n	8002aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f9e9 	bl	8002e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69d9      	ldr	r1, [r3, #28]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	021a      	lsls	r2, r3, #8
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	61da      	str	r2, [r3, #28]
      break;
 8002ae2:	e002      	b.n	8002aea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a37      	ldr	r2, [pc, #220]	@ (8002bec <TIM_Base_SetConfig+0xf0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00f      	beq.n	8002b34 <TIM_Base_SetConfig+0x38>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b1a:	d00b      	beq.n	8002b34 <TIM_Base_SetConfig+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a34      	ldr	r2, [pc, #208]	@ (8002bf0 <TIM_Base_SetConfig+0xf4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d007      	beq.n	8002b34 <TIM_Base_SetConfig+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a33      	ldr	r2, [pc, #204]	@ (8002bf4 <TIM_Base_SetConfig+0xf8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_Base_SetConfig+0x38>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a32      	ldr	r2, [pc, #200]	@ (8002bf8 <TIM_Base_SetConfig+0xfc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d108      	bne.n	8002b46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a28      	ldr	r2, [pc, #160]	@ (8002bec <TIM_Base_SetConfig+0xf0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01b      	beq.n	8002b86 <TIM_Base_SetConfig+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b54:	d017      	beq.n	8002b86 <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a25      	ldr	r2, [pc, #148]	@ (8002bf0 <TIM_Base_SetConfig+0xf4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a24      	ldr	r2, [pc, #144]	@ (8002bf4 <TIM_Base_SetConfig+0xf8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00f      	beq.n	8002b86 <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a23      	ldr	r2, [pc, #140]	@ (8002bf8 <TIM_Base_SetConfig+0xfc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00b      	beq.n	8002b86 <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a22      	ldr	r2, [pc, #136]	@ (8002bfc <TIM_Base_SetConfig+0x100>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a21      	ldr	r2, [pc, #132]	@ (8002c00 <TIM_Base_SetConfig+0x104>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a20      	ldr	r2, [pc, #128]	@ (8002c04 <TIM_Base_SetConfig+0x108>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bec <TIM_Base_SetConfig+0xf0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d103      	bne.n	8002bc6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40000c00 	.word	0x40000c00
 8002bfc:	40014000 	.word	0x40014000
 8002c00:	40014400 	.word	0x40014400
 8002c04:	40014800 	.word	0x40014800

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f023 0201 	bic.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f023 0302 	bic.w	r3, r3, #2
 8002c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd0 <TIM_OC1_SetConfig+0xc8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10c      	bne.n	8002c7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f023 0308 	bic.w	r3, r3, #8
 8002c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a13      	ldr	r2, [pc, #76]	@ (8002cd0 <TIM_OC1_SetConfig+0xc8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	621a      	str	r2, [r3, #32]
}
 8002cc4:	bf00      	nop
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40010000 	.word	0x40010000

08002cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f023 0210 	bic.w	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0320 	bic.w	r3, r3, #32
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002da8 <TIM_OC2_SetConfig+0xd4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10d      	bne.n	8002d50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a15      	ldr	r2, [pc, #84]	@ (8002da8 <TIM_OC2_SetConfig+0xd4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d113      	bne.n	8002d80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40010000 	.word	0x40010000

08002dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a1d      	ldr	r2, [pc, #116]	@ (8002e7c <TIM_OC3_SetConfig+0xd0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10d      	bne.n	8002e26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <TIM_OC3_SetConfig+0xd0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d113      	bne.n	8002e56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	621a      	str	r2, [r3, #32]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40010000 	.word	0x40010000

08002e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	031b      	lsls	r3, r3, #12
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a10      	ldr	r2, [pc, #64]	@ (8002f1c <TIM_OC4_SetConfig+0x9c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d109      	bne.n	8002ef4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	019b      	lsls	r3, r3, #6
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	621a      	str	r2, [r3, #32]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40010000 	.word	0x40010000

08002f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2201      	movs	r2, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e050      	b.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d018      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd0:	d013      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a18      	ldr	r2, [pc, #96]	@ (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00e      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a16      	ldr	r2, [pc, #88]	@ (800303c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a15      	ldr	r2, [pc, #84]	@ (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a13      	ldr	r2, [pc, #76]	@ (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10c      	bne.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40010000 	.word	0x40010000
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800
 8003040:	40000c00 	.word	0x40000c00
 8003044:	40014000 	.word	0x40014000

08003048 <memset>:
 8003048:	4402      	add	r2, r0
 800304a:	4603      	mov	r3, r0
 800304c:	4293      	cmp	r3, r2
 800304e:	d100      	bne.n	8003052 <memset+0xa>
 8003050:	4770      	bx	lr
 8003052:	f803 1b01 	strb.w	r1, [r3], #1
 8003056:	e7f9      	b.n	800304c <memset+0x4>

08003058 <__libc_init_array>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	4d0d      	ldr	r5, [pc, #52]	@ (8003090 <__libc_init_array+0x38>)
 800305c:	4c0d      	ldr	r4, [pc, #52]	@ (8003094 <__libc_init_array+0x3c>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	2600      	movs	r6, #0
 8003064:	42a6      	cmp	r6, r4
 8003066:	d109      	bne.n	800307c <__libc_init_array+0x24>
 8003068:	4d0b      	ldr	r5, [pc, #44]	@ (8003098 <__libc_init_array+0x40>)
 800306a:	4c0c      	ldr	r4, [pc, #48]	@ (800309c <__libc_init_array+0x44>)
 800306c:	f000 f818 	bl	80030a0 <_init>
 8003070:	1b64      	subs	r4, r4, r5
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	2600      	movs	r6, #0
 8003076:	42a6      	cmp	r6, r4
 8003078:	d105      	bne.n	8003086 <__libc_init_array+0x2e>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003080:	4798      	blx	r3
 8003082:	3601      	adds	r6, #1
 8003084:	e7ee      	b.n	8003064 <__libc_init_array+0xc>
 8003086:	f855 3b04 	ldr.w	r3, [r5], #4
 800308a:	4798      	blx	r3
 800308c:	3601      	adds	r6, #1
 800308e:	e7f2      	b.n	8003076 <__libc_init_array+0x1e>
 8003090:	080030d0 	.word	0x080030d0
 8003094:	080030d0 	.word	0x080030d0
 8003098:	080030d0 	.word	0x080030d0
 800309c:	080030d4 	.word	0x080030d4

080030a0 <_init>:
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a2:	bf00      	nop
 80030a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a6:	bc08      	pop	{r3}
 80030a8:	469e      	mov	lr, r3
 80030aa:	4770      	bx	lr

080030ac <_fini>:
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	bf00      	nop
 80030b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b2:	bc08      	pop	{r3}
 80030b4:	469e      	mov	lr, r3
 80030b6:	4770      	bx	lr
